{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","canProcess","id","logSuccess","result","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GAIV,OAHgB,IAAIC,SAAQ,SAAAC,GACzBC,YAAW,kBAAMC,EAAOJ,KAAK,SAK9BI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCZXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAInBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GAIjBA,EAHoBW,EAASE,KAAI,SAAAC,GAAI,OACnCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCpBnC,IAIMe,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCvB,GAL2BsB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKpD,OAAO,IAAIpB,SAAQ,SAACC,EAASwB,GAC3B,IAAMC,EAAaJ,KAAKE,SAAW,GACnCtB,YAAW,WACLwB,GACFzB,EAAQ,CAACkB,EAAYQ,GAAI7B,IAE3B2B,EAAON,EAAYQ,MAClB7B,OAID8B,EAAa,SAAAC,GACjB,IAAIF,EAAKE,EAAO,GACZzB,EAAOyB,EAAO,GAClBxB,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGI0B,EAAW,SAAAH,GACftB,QAAQ0B,KAAR,gCAA6CJ,EAA7C,8BAGFT,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAOzB,KAAKqB,GAAYK,MAAMH,GAEhEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAOzB,KAAKqB,GAAYK,MAAMH,GAEhEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,KAAMzB,KAAKqB,GAAYK,MAAMH,GAE/DZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAOzB,KAAKqB,GAAYK,MAAMH,K","file":"main.2af7d889d09409010586.js","sourcesContent":["const delay = ms => {\n    const promise = new Promise(resolve => {\n       setTimeout(() => logger(ms), 2000)\n    })\n    return promise\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    const updateUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updateUsers);\n  });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) => {\n    const canProcess = Math.random() > 0.3;\n    setTimeout(() => {\n      if (canProcess) {\n        resolve([transaction.id, delay]);\n      }\n      reject(transaction.id);\n    }, delay);\n  });\n};\n\nconst logSuccess = result => {\n  let id = result[0];\n  let time = result[1];\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}